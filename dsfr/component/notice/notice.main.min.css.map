{"version":3,"sources":["<no source>","file:///Users/ket/Documents/work/dsfr/src/dsfr/component/notice/style/_module.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/typography/tool/_styles.scss","file:///Users/ket/Documents/work/dsfr/src/module/color/mixin/_element.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/spacing/tool/_space.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/spacing/tool/_position.scss","%3Cinput%20css%202pDo9C%3E","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/display/tool/_display.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/typography/tool/_font-weight.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/selector/tool/_pseudo.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/icon/tool/_default.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/spacing/tool/_size.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/core/style/display/tool/_mask-image.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/component/link/style/tool/_size.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/component/link/style/tool/_icon.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/component/notice/style/_scheme.scss","file:///Users/ket/Documents/work/dsfr/src/module/media-query/mixin/_respond-from.scss","file:///Users/ket/Documents/work/dsfr/src/module/shame/media-query/mixin/_order.scss","file:///Users/ket/Documents/work/dsfr/src/module/preference/mixin/_forced-colors.scss","file:///Users/ket/Documents/work/dsfr/src/dsfr/component/link/style/tool/_nest.scss"],"names":[],"mappings":"AAAA;;GAAA,ACUA,WC+FI,iBAAA,CAAA,gBAAA,CChEA,gDAAA,CAAA,4BAAA,CCfE,mBARA,CAOA,gBAPA,CCVJ,iBCcF,CLHE,iBMAE,sBAAA,CARA,YAAA,CAIA,kBAAA,CAQA,6BAAA,CFfF,iBC0BF,CLXI,wHAME,aAAA,CAEA,iBAAA,CADA,mBKcN,CLTE,kBOhBA,eAAA,CJUI,mBAXA,CCVJ,iBCyCF,CGjCE,yBC2BE,kBAAA,CAkBA,6BAAA,CAFA,oBAAA,CADA,aAAA,CCGE,uBAAA,CPhCA,kBAXA,CQPJ,2BFoD2B,CEnD3B,mBFmD2B,CAHzB,kDAAA,CCFE,sBLNN,CLNE,iBGjBI,mBE2CN,CLtBE,mCAEE,aKuBJ,CLjBE,oDChCA,iBAAA,CAGE,kBIuDJ,CGpEE,6CRsDM,YKuBR,CLlBE,0BAKE,aAAA,CYpEF,iBAAA,CACA,kBAFc,CTkBV,kBAXA,CAWA,kBAXA,CU2BF,eANa,CAKb,cALa,CDtBb,eAFW,CC2BX,eAAA,CAKA,oBAPY,CAGZ,kBRiEJ,CG5FE,iCKkCI,gBAAA,CJWF,6BAAA,CD1CE,UCsD+B,CAdjC,oBAAA,CADA,aAAA,CCGE,uBAAA,CGVA,aAAA,CACA,kBAZU,CFlCd,yDF2CM,CE1CN,iDF0CM,CEtCN,2BFoD2B,CEnD3B,mBFmD2B,CAHzB,kDAAA,CCFE,sBLuDN,CGjGE,qdAGI,UH6HN,CGhIE,wIGVA,4DF2CM,CE1CN,oDN6IF,CGpIE,2IGVA,+DF2CM,CE1CN,uDNkJF,CGzIE,yIGVA,iEF2CM,CE1CN,yDNuJF,CG9IE,iSGVA,kEF2CM,CE1CN,0DNiKF,CGxJE,kJGVA,4DF2CM,CE1CN,oDNsKF,CLhBE,sFAKE,uBAAA,CAEA,2BAAA,CADA,4BAAA,CGtIE,oBEkKN,CLzBI,8JACE,wBK2BN,CGlLE,8FGVA,+DF2CM,CE1CN,uDN0MF,CGjME,gDGVA,qEF2CM,CE1CN,6DN8MF,CGrME,4CGVA,uEF2CM,CE1CN,+DNkNF,CS7MI,iBZwCI,kBAAA,CAqCJ,6CAAA,CAAA,+CAAA,CAhDA,gDAAA,CAAA,8BG4LJ,CSpNI,+CZmCI,kBAAA,CAqCJ,gDAAA,CAAA,kDAAA,CAhDA,mDAAA,CAAA,iCGmMJ,CSrNI,kBZ6BI,kBAAA,CAqCJ,8CAAA,CAAA,gDAAA,CAhDA,iDAAA,CAAA,+BG0MJ,CSvNI,wBZwBI,kBAAA,CAqCJ,0CAAA,CAAA,4CAAA,CAhDA,6CAAA,CAAA,+BGiNJ,CS1NM,uCZoBE,kBAAA,CAqCJ,iDAAA,CAAA,mDAAA,CAhDA,oDGuNJ,CS3NI,2BZeI,kBAAA,CAqCJ,mDAAA,CAAA,qDAAA,CAhDA,sDAAA,CAAA,+BG8NJ,CS9NM,0CZWE,kBAAA,CAqCJ,0DAAA,CAAA,4DAAA,CAhDA,6DGoOJ,CS/NI,oBZMI,kBAAA,CAqCJ,yCAAA,CAAA,2CAAA,CAhDA,4CAAA,CAAA,0FAAA,CAAA,+BG4OJ,CSlOM,mCZCE,kBAAA,CAqCJ,gDAAA,CAAA,kDAAA,CAhDA,mDGkPJ,CSnOI,0CZJI,kBAAA,CAqCJ,0CAAA,CAAA,4CAAA,CAhDA,6CAAA,CAAA,wFAAA,CAAA,+BG0PJ,CSrOM,wEZVE,kBAAA,CAqCJ,iDAAA,CAAA,mDAAA,CAhDA,oDGgQJ,CStOI,wBZfI,kBAAA,CAqCJ,yCAAA,CAAA,2CAAA,CAhDA,4CAAA,CAAA,wFAAA,CAAA,+BGwQJ,CSzOM,uCZpBE,kBAAA,CAqCJ,gDAAA,CAAA,kDAAA,CAhDA,mDG8QJ,CUxSI;ECRI,cAAA,ChB2CN,mCAII,cKyBJ,CAzEF,CUSI;ECRI,cAAA,ChBmDN,oDChCA,cAAA,CAGE,kBI4DF,CLdA,0BG9CI,gBE+GJ,CAnIF,CUMI;ECRI,cAAA,CXKR,CUGI;ECRI,cAAA,CXQR,CYNE,yDjBCF,WAMI,iBKUF,CGVA,yBC2FI,2BThEyB,CS8DvB,wBJrCN,CGpDA,iCC2FI,2BS/FW,CT6FT,wBJ8BN,CLWA,mDAGI,eK6BJ,CGlKA,+RC2FI,0BT6D2B,CS/DzB,wBJ8FN,CL1CA,sFAeI,eKgCJ,CAjLF","file":"notice.main.min.css","sourcesContent":[null,"////\n/// Notice Module\n/// @group notice\n////\n\n@use 'src/module/preference';\n@use 'src/module/media-query';\n@use 'src/module/selector';\n@use 'src/module/spacing';\n\n#{selector.ns(notice)} {\n  @include relative();\n  @include set-title-margin(0);\n  @include set-text-margin(0);\n  @include padding-y(4v);\n  @include preference.forced-colors {\n    outline: 1px solid;\n  }\n\n  &__body {\n    @include relative;\n    @include display-flex(row, flex-start, space-between);\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      color: inherit;\n      line-height: inherit;\n      font-size: inherit;\n    }\n  }\n\n  &__title {\n    @include relative;\n    @include margin-right(1v);\n    @include font-weight(bold);\n    @include icon-size(md, before);\n    @include icon-style(before) {\n      @include margin-right(2v);\n    }\n    @include icon-forced-color(canvastext, true, before);\n  }\n\n  &__desc {\n    @include margin-right(1v);\n  }\n\n  &__title,\n  &__desc {\n    display: block;\n    @include media-query.respond-from(sm) {\n      display: inline;\n    }\n  }\n\n  &__title,\n  &__desc,\n  &__link {\n    @include text-style(sm);\n    @include media-query.respond-from(md) {\n      @include text-style(md);\n    }\n  }\n\n  &--no-icon {\n    #{selector.ns(notice)}__title {\n      @include before {\n        display: none;\n      }\n    }\n  }\n\n  #{selector.ns(btn--close)} {\n    @include nest-btn(sm, only, close-line, null, false);\n    @include margin-top(-1v);\n    @include margin-left(1v);\n    @include margin-left(4v, md);\n    color: inherit;\n  }\n\n  &--info,\n  &--warning,\n  &--alert,\n  &--weather-orange,\n  &--weather-red,\n  &--weather-purple,\n  &--witness,\n  &--kidnapping,\n  &--attack,\n  &--cyberattack {\n    #{selector.ns(notice)}__title {\n      @include icon-content;\n    }\n  }\n\n  &--info {\n    #{selector.ns(notice)}__title {\n      @include has-not-icon {\n        @include icon-image(info-fill, before);\n      }\n    }\n  }\n\n  &--warning {\n    #{selector.ns(notice)}__title {\n      @include has-not-icon {\n        @include icon-image(warning-fill, before);\n      }\n    }\n  }\n\n  &--alert {\n    #{selector.ns(notice)}__title {\n      @include has-not-icon {\n        @include icon-image(error-warning-fill, before);\n      }\n    }\n  }\n\n  &--weather-orange {\n    #{selector.ns(notice)}__title {\n      @include has-not-icon {\n        @include icon-image(heavy-showers-fill, before);\n      }\n    }\n  }\n\n  &--weather-red {\n    #{selector.ns(notice)}__title {\n      @include has-not-icon {\n        @include icon-image(heavy-showers-fill, before);\n      }\n    }\n  }\n\n  &--weather-purple {\n    #{selector.ns(notice)}__title {\n      @include has-not-icon {\n        @include icon-image(typhoon-fill, before);\n      }\n    }\n  }\n\n  &--weather-red,\n  &--weather-purple {\n    @include preference.forced-colors {\n      color: highlight;\n    }\n\n    #{selector.ns(notice)}__title {\n      @include icon-forced-color(highlight, true, before);\n    }\n  }\n\n  &--witness,\n  &--kidnapping,\n  &--attack,\n  &--cyberattack {\n    @include padding-top(5.5v);\n    background-position: 0 0;\n    background-size: spacing.space(100% 1.5v);\n    background-repeat: no-repeat;\n\n    #{selector.ns(notice)}__title {\n      text-transform: uppercase;\n      @include icon-forced-color(highlight, true, before);\n    }\n\n    @include preference.forced-colors {\n      color: highlight;\n    }\n  }\n\n  &--witness,\n  &--cyberattack {\n    #{selector.ns(notice)}__title {\n      @include icon-image(warning-fill, before);\n    }\n  }\n\n  &--kidnapping {\n    #{selector.ns(notice)}__title {\n      @include icon-image(alert-warning-fill, before);\n    }\n  }\n\n  &--attack {\n    #{selector.ns(notice)}__title {\n      @include icon-image(alert-warning-2-fill, before);\n    }\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@use 'src/module/spacing';\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} spacing.space($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} spacing.space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","@use 'sass:list';\n@use 'sass:map';\n@use 'src/module/legacy';\n@use 'src/module/media-query';\n@use 'src/module/spacing';\n@use 'src/module/specificity';\n@use 'src/module/string';\n@use 'src/module/utilities';\n@use '../variable/constant';\n@use '../function/box-shadow' as bs;\n@use '../function/colors';\n@use '../function/result';\n@use '../function/token';\n\n$COLOR: constant.$value;\n\n@mixin element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map.get($options, legacy);\n  $important: map.get($options, important);\n  $hover: map.get($options, hover);\n  $standalone: map.get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy == true {\n    $legacy-target: ie11;\n  }\n\n  $tokens: token.normalise($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: colors.from-list($tokens, $type, $options);\n  $result: result.get($colors, $value);\n  $result: specificity.important($result, $important);\n\n  @include legacy.is($legacy-target) {\n    #{$prop}: #{string.unstringify($result)};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and list.length($tokens) == 1) {\n\n    $token: nth($tokens, 1);\n    @if $legacy or $standalone {\n      @include _apply-pseudos($token, false, true, $legacy-target, $prop, $value, $important);\n    }\n    @else {\n      @if $prop == background-color {\n        --idle: transparent; // #{$result};\n        @include _apply-pseudos($token, true, false, null, $prop, $value, $important);\n      }\n      @else {\n        @include _apply-pseudos($token, true, true, null, $prop, $value, $important);\n      }\n    }\n  }\n}\n\n@mixin _apply-pseudos($token, $decision: true, $pseudo: false, $target: null, $prop: background-color, $value: constant.$value, $important: false) {\n  @include legacy.is($target) {\n    @include _apply-pseudo($token, hover, $decision, $pseudo, $prop, $value, $important);\n    @include _apply-pseudo($token, active, $decision, $pseudo, $prop, $value, $important);\n  }\n}\n\n@mixin _apply-pseudo($token, $type, $decision: true, $pseudo: false, $prop: background-color, $value: constant.$value, $important: false) {\n  $nest: null;\n  $p: --#{$type};\n  @if $pseudo {\n    $nest: '&:#{$type}';\n    $p: $prop;\n  }\n\n  $t: hex;\n  $options: (#{$type}: true);\n  @if $decision {\n    $t: decision;\n    $options: (var: true, #{$type}: true);\n  }\n\n  $color: colors.from($token, $t, $options);\n  $result: result.get($color, $value);\n  $result: specificity.important($result, $important);\n\n  @include utilities.nest($nest) {\n    #{$p}: #{string.unstringify($result)};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin background($tokens, $options:()) {\n  @if not map.has-key($options, hover) {\n    $options: map.merge($options, (hover: inherit));\n  }\n  @include element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin transparent-background($options) {\n  $legacy: map.get($options, legacy);\n  $important: map.get($options, important);\n  $hover: map.get($options, hover);\n  $tokens: token.normalise(default grey, background);\n  $value: specificity.important(transparent, $important);\n\n  @if $legacy {\n    @include legacy.is(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin background-image($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: token.length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: string.unquote('$color##{$i}');\n      $transformed: list.append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin text($tokens, $options) {\n  @include element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin text-fill($tokens, $options) {\n  @include element(-webkit-text-fill-color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin fill($tokens, $options) {\n  @include element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin border($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map.has-key($options, side) {\n    $prop:border-#{map.get($options, side)};\n  }\n  @include element($prop, border, $tokens, $options, $value);\n}\n\n@mixin no-border($options: ()) {\n  $breakpoint: map.get($options, breakpoint);\n  $legacy: map.get($options, legacy);\n  @include media-query.respond-from($breakpoint) {\n    @if $legacy {\n      @include legacy.is(ie11) {\n        border: 0;\n      }\n    }\n    @else {\n      border: 0;\n    }\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin outline($tokens, $options, $value:1px solid $COLOR) {\n  @include element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin box-shadow($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: token.length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if bs.has($v) {\n      $transformed: append($transformed, bs.get($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include element(box-shadow, border, $tokens, $options, spacing.space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin no-box-shadow($options) {\n  $breakpoint: map.get($options, breakpoint);\n  $legacy: map.get($options, legacy);\n  @include media-query.respond-from($breakpoint) {\n    @if $legacy {\n      @include legacy.is(ie11) {\n        box-shadow: none;\n      }\n    }\n    @else {\n      box-shadow: none;\n    }\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n@use 'src/module/spacing';\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: spacing.space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@use 'src/module/spacing';\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: spacing.space($top);\n}\n\n@mixin right($top) {\n  right: spacing.space($top);\n}\n\n@mixin bottom($top) {\n  bottom: spacing.space($top);\n}\n\n@mixin left($top) {\n  left: spacing.space($top);\n}\n","@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ALERT\n\\* ˍˍˍˍˍˍˍˍˍ */\n@media (min-width: 36em) {\n  /*! media sm */\n}\n@media (min-width: 48em) {\n  /*! media md */\n}\n@media (min-width: 62em) {\n  /*! media lg */\n}\n@media (min-width: 78em) {\n  /*! media xl */\n}\n.fr-notice {\n  position: relative;\n  --title-spacing: 0;\n  --text-spacing: 0;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice {\n    outline: 1px solid;\n  }\n}\n.fr-notice__body {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n}\n.fr-notice__body h1,\n.fr-notice__body h2,\n.fr-notice__body h3,\n.fr-notice__body h4,\n.fr-notice__body h5,\n.fr-notice__body h6 {\n  color: inherit;\n  line-height: inherit;\n  font-size: inherit;\n}\n.fr-notice__title {\n  position: relative;\n  margin-right: 0.25rem;\n  font-weight: 700;\n}\n.fr-notice__title::before {\n  --icon-size: 1.5rem;\n}\n.fr-notice__title::before {\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n  margin-right: 0.5rem;\n}\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice__title::before {\n    forced-color-adjust: none;\n    background-color: canvastext;\n  }\n}\n.fr-notice__desc {\n  margin-right: 0.25rem;\n}\n.fr-notice__title, .fr-notice__desc {\n  display: block;\n}\n@media (min-width: 36em) {\n  .fr-notice__title, .fr-notice__desc {\n    display: inline;\n  }\n}\n.fr-notice__title, .fr-notice__desc, .fr-notice__link {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n}\n@media (min-width: 48em) {\n  .fr-notice__title, .fr-notice__desc, .fr-notice__link {\n    font-size: 1rem;\n    line-height: 1.5rem;\n  }\n}\n.fr-notice--no-icon .fr-notice__title::before {\n  display: none;\n}\n.fr-notice .fr-btn--close {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 2rem;\n  padding: 0.25rem 0.75rem;\n  overflow: hidden;\n  white-space: nowrap;\n  max-width: 2rem;\n  max-height: 2rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  margin-top: -0.25rem;\n  margin-left: 0.25rem;\n  color: inherit;\n}\n.fr-notice .fr-btn--close::before {\n  --icon-size: 1rem;\n  margin-left: 0;\n  margin-right: 0.5rem;\n}\n.fr-notice .fr-btn--close::before {\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n}\n.fr-notice .fr-btn--close::before {\n  -webkit-mask-image: url(\"../../icons/system/close-line.svg\");\n  mask-image: url(\"../../icons/system/close-line.svg\");\n}\n.fr-notice .fr-btn--close::before {\n  content: \"\";\n}\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice .fr-btn--close::before {\n    forced-color-adjust: none;\n    background-color: buttontext;\n  }\n}\n@media (min-width: 48em) {\n  .fr-notice .fr-btn--close {\n    margin-left: 1rem;\n  }\n}\n.fr-notice--info .fr-notice__title::before, .fr-notice--warning .fr-notice__title::before, .fr-notice--alert .fr-notice__title::before, .fr-notice--weather-orange .fr-notice__title::before, .fr-notice--weather-red .fr-notice__title::before, .fr-notice--weather-purple .fr-notice__title::before, .fr-notice--witness .fr-notice__title::before, .fr-notice--kidnapping .fr-notice__title::before, .fr-notice--attack .fr-notice__title::before, .fr-notice--cyberattack .fr-notice__title::before {\n  content: \"\";\n}\n.fr-notice--info .fr-notice__title:not([class^=fr-icon-]):not([class*=\" fr-icon-\"]):not([class^=fr-fi-]):not([class*=\" fr-fi-\"])::before {\n  -webkit-mask-image: url(\"../../icons/system/fr--info-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--info-fill.svg\");\n}\n\n.fr-notice--warning .fr-notice__title:not([class^=fr-icon-]):not([class*=\" fr-icon-\"]):not([class^=fr-fi-]):not([class*=\" fr-fi-\"])::before {\n  -webkit-mask-image: url(\"../../icons/system/fr--warning-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--warning-fill.svg\");\n}\n\n.fr-notice--alert .fr-notice__title:not([class^=fr-icon-]):not([class*=\" fr-icon-\"]):not([class^=fr-fi-]):not([class*=\" fr-fi-\"])::before {\n  -webkit-mask-image: url(\"../../icons/system/error-warning-fill.svg\");\n  mask-image: url(\"../../icons/system/error-warning-fill.svg\");\n}\n\n.fr-notice--weather-orange .fr-notice__title:not([class^=fr-icon-]):not([class*=\" fr-icon-\"]):not([class^=fr-fi-]):not([class*=\" fr-fi-\"])::before {\n  -webkit-mask-image: url(\"../../icons/weather/heavy-showers-fill.svg\");\n  mask-image: url(\"../../icons/weather/heavy-showers-fill.svg\");\n}\n\n.fr-notice--weather-red .fr-notice__title:not([class^=fr-icon-]):not([class*=\" fr-icon-\"]):not([class^=fr-fi-]):not([class*=\" fr-fi-\"])::before {\n  -webkit-mask-image: url(\"../../icons/weather/heavy-showers-fill.svg\");\n  mask-image: url(\"../../icons/weather/heavy-showers-fill.svg\");\n}\n\n.fr-notice--weather-purple .fr-notice__title:not([class^=fr-icon-]):not([class*=\" fr-icon-\"]):not([class^=fr-fi-]):not([class*=\" fr-fi-\"])::before {\n  -webkit-mask-image: url(\"../../icons/weather/typhoon-fill.svg\");\n  mask-image: url(\"../../icons/weather/typhoon-fill.svg\");\n}\n\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice--weather-red, .fr-notice--weather-purple {\n    color: highlight;\n  }\n}\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice--weather-red .fr-notice__title::before, .fr-notice--weather-purple .fr-notice__title::before {\n    forced-color-adjust: none;\n    background-color: highlight;\n  }\n}\n.fr-notice--witness, .fr-notice--kidnapping, .fr-notice--attack, .fr-notice--cyberattack {\n  padding-top: 1.375rem;\n  background-position: 0 0;\n  background-size: 100% 0.375rem;\n  background-repeat: no-repeat;\n}\n.fr-notice--witness .fr-notice__title, .fr-notice--kidnapping .fr-notice__title, .fr-notice--attack .fr-notice__title, .fr-notice--cyberattack .fr-notice__title {\n  text-transform: uppercase;\n}\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice--witness .fr-notice__title::before, .fr-notice--kidnapping .fr-notice__title::before, .fr-notice--attack .fr-notice__title::before, .fr-notice--cyberattack .fr-notice__title::before {\n    forced-color-adjust: none;\n    background-color: highlight;\n  }\n}\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .fr-notice--witness, .fr-notice--kidnapping, .fr-notice--attack, .fr-notice--cyberattack {\n    color: highlight;\n  }\n}\n.fr-notice--witness .fr-notice__title::before, .fr-notice--cyberattack .fr-notice__title::before {\n  -webkit-mask-image: url(\"../../icons/system/fr--warning-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--warning-fill.svg\");\n}\n.fr-notice--kidnapping .fr-notice__title::before {\n  -webkit-mask-image: url(\"../../icons/system/fr--alert-warning-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--alert-warning-fill.svg\");\n}\n.fr-notice--attack .fr-notice__title::before {\n  -webkit-mask-image: url(\"../../icons/system/fr--alert-warning-2-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--alert-warning-2-fill.svg\");\n}\n\n.fr-notice {\n  background-color: var(--background-contrast-grey);\n  color: var(--text-title-grey);\n}\n.fr-notice--info {\n  background-color: var(--background-contrast-info);\n  --idle: transparent;\n  --hover: var(--background-contrast-info-hover);\n  --active: var(--background-contrast-info-active);\n  color: var(--text-default-info);\n}\n.fr-notice--warning, .fr-notice--weather-orange {\n  background-color: var(--background-contrast-warning);\n  --idle: transparent;\n  --hover: var(--background-contrast-warning-hover);\n  --active: var(--background-contrast-warning-active);\n  color: var(--text-default-warning);\n}\n.fr-notice--alert {\n  background-color: var(--background-contrast-error);\n  --idle: transparent;\n  --hover: var(--background-contrast-error-hover);\n  --active: var(--background-contrast-error-active);\n  color: var(--text-default-error);\n}\n.fr-notice--weather-red {\n  background-color: var(--background-flat-error);\n  --idle: transparent;\n  --hover: var(--background-flat-error-hover);\n  --active: var(--background-flat-error-active);\n  color: var(--text-inverted-grey);\n}\n.fr-notice--weather-red .fr-btn--close {\n  background-color: var(--background-action-high-error);\n  --idle: transparent;\n  --hover: var(--background-action-high-error-hover);\n  --active: var(--background-action-high-error-active);\n}\n.fr-notice--weather-purple {\n  background-color: var(--background-flat-purple-glycine);\n  --idle: transparent;\n  --hover: var(--background-flat-purple-glycine-hover);\n  --active: var(--background-flat-purple-glycine-active);\n  color: var(--text-inverted-grey);\n}\n.fr-notice--weather-purple .fr-btn--close {\n  background-color: var(--background-action-high-purple-glycine);\n  --idle: transparent;\n  --hover: var(--background-action-high-purple-glycine-hover);\n  --active: var(--background-action-high-purple-glycine-active);\n}\n.fr-notice--witness {\n  background-color: var(--background-flat-grey);\n  --idle: transparent;\n  --hover: var(--background-flat-grey-hover);\n  --active: var(--background-flat-grey-active);\n  color: var(--text-inverted-grey);\n  background-image: linear-gradient(0deg, var(--border-plain-error), var(--border-plain-error));\n}\n.fr-notice--witness .fr-btn--close {\n  background-color: var(--background-action-high-grey);\n  --idle: transparent;\n  --hover: var(--background-action-high-grey-hover);\n  --active: var(--background-action-high-grey-active);\n}\n.fr-notice--kidnapping, .fr-notice--attack {\n  background-color: var(--background-flat-error);\n  --idle: transparent;\n  --hover: var(--background-flat-error-hover);\n  --active: var(--background-flat-error-active);\n  color: var(--text-inverted-grey);\n  background-image: linear-gradient(0deg, var(--border-plain-grey), var(--border-plain-grey));\n}\n.fr-notice--kidnapping .fr-btn--close, .fr-notice--attack .fr-btn--close {\n  background-color: var(--background-action-high-error);\n  --idle: transparent;\n  --hover: var(--background-action-high-error-hover);\n  --active: var(--background-action-high-error-active);\n}\n.fr-notice--cyberattack {\n  background-color: var(--background-flat-grey);\n  --idle: transparent;\n  --hover: var(--background-flat-grey-hover);\n  --active: var(--background-flat-grey-active);\n  color: var(--text-inverted-grey);\n  background-image: linear-gradient(0deg, var(--border-plain-info), var(--border-plain-info));\n}\n.fr-notice--cyberattack .fr-btn--close {\n  background-color: var(--background-action-high-grey);\n  --idle: transparent;\n  --hover: var(--background-action-high-grey-hover);\n  --active: var(--background-action-high-grey-active);\n}","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale ['regular'] - Type scale value from `$weight-scale` (Default to 'regular' = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight('bold');\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin build-utillity-font-weight() {\n  $fontWeightValues: map-get($font-weight-vars, values);\n  @if $fontWeightValues == 'all' {\n    $fontWeightValues: map-keys($font-weight-names);\n  }\n  @each $weight in $fontWeightValues {\n    $name: map-get($font-weight-names, $weight);\n    #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon default\n/// @group core\n////\n\n@use 'src/module/path';\n@use 'src/module/spacing';\n@use 'src/module/specificity';\n@use 'src/module/preference';\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return spacing.space(map-get($icon-size-map, $size));\n}\n\n@function get-icon-url($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{path.dist()}#{map-get($config, path)}');\n  @return specificity.important($url, $important);\n}\n\n@function get-icon-pseudo($restrain) {\n  @if $restrain == before or $restrain == after {\n    @return $restrain;\n  }\n  @return before after;\n}\n\n@mixin _icon-pseudo ($restrain: null) {\n  @include _pseudo(get-icon-pseudo($restrain)) {\n    @content;\n  }\n}\n\n@mixin icon-size ($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    --icon-size: #{icon-size($size)};\n    @content;\n  }\n}\n\n@mixin icon-image ($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n\n  @include _icon-pseudo($restrain) {\n    @include mask-image($url);\n  }\n}\n\n@mixin icon-style($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    @include mask-image-size(100% 100%);\n    @content;\n  }\n}\n\n@mixin icon-content($is-before: true, $override: false) {\n  $pseudos: before after;\n  @if not $is-before {\n    $pseudos: after before;\n  }\n  @include _pseudo(nth($pseudos, 1), '') {\n    @content;\n  }\n  @if $override {\n    @include _pseudo(nth($pseudos, 2), none);\n  }\n}\n\n@mixin icon($icon: null, $size: md, $restrain: null, $styling: true, $is-before: $restrain != after, $override: false) {\n  @if $styling {\n    @include icon-style($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $restrain);\n  }\n\n  @if $is-before != null {\n    @include icon-content($is-before, $override) {\n      @content;\n    }\n  }\n}\n\n@mixin icon-forced-color($color: graytext, $adjust: false, $restrain: before after) {\n  @include _pseudo($restrain) {\n    @include preference.forced-colors {\n      @if $adjust == true {\n        forced-color-adjust: none;\n      }\n      background-color: $color;\n    }\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image($icon);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@use '../../../../../module/spacing';\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{spacing.space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{spacing.space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{spacing.space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{spacing.space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{spacing.space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{spacing.space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{spacing.space($width)};\n    }\n    @if $height != null {\n      height: #{spacing.space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{spacing.space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{spacing.space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{spacing.space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{spacing.space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : mask-image\n/// @group core\n////\n\n@mixin mask-image($value) {\n  -webkit-mask-image: $value;\n  mask-image: $value;\n}\n\n@mixin mask-image-size($value) {\n  -webkit-mask-size: $value;\n  mask-size: $value;\n}\n\n@mixin mask-image-position($value) {\n  -webkit-mask-position: $value;\n  mask-position: $value;\n}\n\n@mixin mask-image-repeat($value) {\n  -webkit-mask-repeat: $value;\n  mask-repeat: $value;\n}\n","////\n/// Link Tool : sizes\n/// @group link\n////\n\n@use \"sass:math\";\n@use 'src/module/spacing';\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: spacing.space(map_get($style, line-height));\n  font-size: spacing.space($font-size);\n  line-height: $line-height;\n\n  $min-height: spacing.space(map_get($size-settings, min-height));\n  @if $min-height > 0 {\n    min-height: $min-height;\n  }\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: math.max($line-height, $max-icon-height);\n  $padding-x: spacing.space(map_get($size-settings, padding-x));\n  $padding-y: math.max(($min-height - $space-y) * 0.5, 0);\n\n  padding: #{$padding-y} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height * 0.5};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return math.div(icon-size($size), 8);\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: spacing.space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: spacing.space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) * 0.5;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Link Tool : icons\n/// @group link\n////\n\n@use 'src/module/spacing';\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $override-icon: true) {\n\n  $icon-size: icon-size(map_get($size-settings, icon));\n\n  @if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: spacing.space(map_get($size-settings, icon-margin-x));\n\n  @if $place == left {\n    overflow: initial;\n    max-width: 100%;\n    max-height: none;\n    @include before {\n      --icon-size: #{$icon-size};\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n    }\n  }\n  @else if $place == right {\n    overflow: initial;\n    max-width: 100%;\n    max-height: none;\n    @include icon-content(false, $override-icon) {\n      --icon-size: #{$icon-size};\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n    }\n  }\n  @else if $place == only {\n    $min-height: spacing.space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) * 0.5;\n\n    overflow: hidden;\n    white-space: nowrap;\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      --icon-size: #{$icon-size};\n      margin-left: 0;\n      margin-right: $padding-x;\n    }\n  }\n}\n","////\n/// notice Scheme\n/// @group notice\n////\n\n@use 'src/module/color';\n\n@mixin _notice-scheme($legacy: false) {\n  #{ns(notice)} {\n    @include color.background(contrast grey, (legacy:$legacy, hover: false, active: false));\n    @include color.text(title grey, (legacy:$legacy));\n\n    &--info {\n      @include color.background(contrast info, (legacy:$legacy));\n      @include color.text(default info, (legacy:$legacy));\n    }\n\n    &--warning,\n    &--weather-orange {\n      @include color.background(contrast warning, (legacy:$legacy));\n      @include color.text(default warning, (legacy:$legacy));\n    }\n\n    &--alert {\n      @include color.background(contrast error, (legacy:$legacy));\n      @include color.text(default error, (legacy:$legacy));\n    }\n\n    &--weather-red {\n      @include color.background(flat error, (legacy:$legacy));\n      @include color.text(inverted grey, (legacy:$legacy));\n\n      #{ns(btn--close)} {\n        @include color.background(action-high error, (legacy:$legacy));\n      }\n    }\n\n    &--weather-purple {\n      @include color.background(flat purple-glycine, (legacy:$legacy));\n      @include color.text(inverted grey, (legacy:$legacy));\n\n      #{ns(btn--close)} {\n        @include color.background(action-high purple-glycine, (legacy:$legacy));\n      }\n    }\n\n    &--witness {\n      @include color.background(flat grey, (legacy:$legacy));\n      @include color.text(inverted grey, (legacy:$legacy));\n      @include color.background-image(border plain error, (legacy:$legacy));\n\n      #{ns(btn--close)} {\n        @include color.background(action-high grey, (legacy:$legacy));\n      }\n    }\n\n    &--kidnapping,\n    &--attack {\n      @include color.background(flat error, (legacy:$legacy));\n      @include color.text(inverted grey, (legacy:$legacy));\n      @include color.background-image(border plain grey, (legacy:$legacy));\n\n      #{ns(btn--close)} {\n        @include color.background(action-high error, (legacy:$legacy));\n      }\n    }\n\n    &--cyberattack {\n      @include color.background(flat grey, (legacy:$legacy));\n      @include color.text(inverted grey, (legacy:$legacy));\n      @include color.background-image(border plain info, (legacy:$legacy));\n\n      #{ns(btn--close)} {\n        @include color.background(action-high grey, (legacy:$legacy));\n      }\n    }\n  }\n}\n","@use '../variable/breakpoints';\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get(breakpoints.$values, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","@use 'src/module/media-query/variable/breakpoints';\n@use 'src/module/media-query';\n\n@mixin order () {\n  @each $bp, $limits in breakpoints.$values {\n    @if $bp != xs {\n      @include media-query.respond-from($bp) {\n        /*! media #{$bp} */\n      }\n    }\n  }\n}\n","///  Mixin de contraste pour le windows high contrast mode\n///  @param {string} $active - active ou none\n/// @example scss -\n/// pour un contraste plus élevé\n/// @include forced-colors() {\n///   // your styles\n/// }\n\n@mixin forced-colors($active: active) {\n  @media (-ms-high-contrast: $active), (forced-colors: $active) {\n    @content;\n  }\n}\n","////\n/// Link Tool : link\n/// @group link\n////\n\n@mixin _nest-link($settings: $links-settings, $size: md, $place: null, $icon: null, $from: null, $insert: true, $align-on-content: false, $override-icon: true) {\n  $selector: null;\n  $sizes: map_get($settings, sizes);\n  $size-settings: map_get($sizes, $size);\n  $border-radius: map-get($settings, border-radius);\n  $places: map-get($links-settings, places);\n  $append: map-get($settings, append);\n  $forced-color: map_get($settings, forced-color);\n\n  @if $insert {\n    $selector: ns(map-get($settings, selector));\n\n    @if $append != null {\n      $selector: '#{$selector} #{$append}';\n    }\n  }\n\n  @include nest($selector) {\n    @include respond-from($from) {\n      @include _build-link-size($size-settings, $border-radius);\n\n      @if $icon != null {\n        $restrain: _get-link-restrain($places, $place);\n        $is-before: _get-link-is-before($places, $place);\n        $icon-size: _get-link-icon-size($size-settings, $places, $place);\n        @if $place != null {\n          @include _build-link-icon($size-settings, $place, $size, $override-icon);\n        }\n        @include icon-style($restrain);\n        @include icon-image($icon, $restrain);\n        @include icon-content($is-before, $override-icon and not $is-before);\n        @include icon-forced-color($forced-color, true, $restrain);\n      }\n      @else {\n        @if $place != null {\n          @include _build-link-icon($size-settings, $place, $size);\n        }\n        @else if $size != null {\n          $restrain: _get-link-restrain($places, $place);\n          $icon-size: _get-link-icon-size($size-settings, $places, $place);\n          @include icon-size($icon-size, $restrain);\n        }\n      }\n\n      @if map-get($settings, align-on-content) and $align-on-content {\n        @include _link-align-on-content($size, $place, $size-settings);\n      }\n\n      @content;\n    }\n  }\n}\n\n@mixin nest-link($size:md, $place: null, $icon:null, $from: null, $insert: true, $align-on-content: false) {\n  @include _nest-link($links-settings, $size, $place, $icon, $from, $insert, $align-on-content) {\n    @content;\n  }\n}\n"]}